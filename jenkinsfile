pipeline {
    agent any

    environment {
        AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        AWS_DEFAULT_REGION = 'your-default-region'
        TF_VAR_aws_region = "${env.AWS_DEFAULT_REGION}"
        SSH_KEY_PATH = "${HOME}/.ssh/deploy-docs-k8s.pem"
    }

    stages {
        stage('Install Dependencies') {
            steps {
                sh '''
                curl -sSL https://get.docker.com/ | sh
                apt-get install -yq jq python-pip curl unzip build-essential python-dev
                pip install awscli
                curl -o /tmp/terraform.zip https://releases.hashicorp.com/terraform/0.7.11/terraform_0.7.11_linux_amd64.zip
                unzip /tmp/terraform.zip -d /usr/bin
                '''
            }
        }

        stage('Clone Repository') {
            steps {
                git url: 'https://github.com/microservices-demo/microservices-demo'
                dir('microservices-demo') {
                    sh 'pwd'
                }
            }
        }

        stage('Setup AWS Key Pair') {
            steps {
                sh '''
                mkdir -p ~/.ssh/
                aws ec2 describe-key-pairs --key-name deploy-docs-k8s &>/dev/null
                if [ $? -eq 0 ]; then aws ec2 delete-key-pair --key-name deploy-docs-k8s; fi
                aws ec2 create-key-pair --key-name deploy-docs-k8s --query 'KeyMaterial' --output text > ${SSH_KEY_PATH}
                chmod 600 ${SSH_KEY_PATH}
                '''
            }
        }

        stage('Run Terraform') {
            steps {
                dir('microservices-demo/deploy/kubernetes/terraform') {
                    sh 'terraform init'
                    sh 'terraform apply -auto-approve'
                }
            }
        }

        stage('Copy Manifests to Master') {
            steps {
                script {
                    def master_ip = sh(script: "terraform output -json | jq -r '.master_address.value'", returnStdout: true).trim()
                    sh """
                    scp -i ${SSH_KEY_PATH} -o StrictHostKeyChecking=no -rp microservices-demo/deploy/kubernetes/manifests ubuntu@${master_ip}:/tmp/
                    """
                }
            }
        }

        stage('Setup Kubernetes and Weave Net') {
            steps {
                script {
                    def master_ip = sh(script: "terraform output -json | jq -r '.master_address.value'", returnStdout: true).trim()
                    sh """
                    ssh -i ${SSH_KEY_PATH} ubuntu@${master_ip} "sudo kubeadm init > k8s-init.log"
                    ssh -i ${SSH_KEY_PATH} ubuntu@${master_ip} "sudo cp /etc/kubernetes/admin.conf /home/ubuntu/"
                    ssh -i ${SSH_KEY_PATH} ubuntu@${master_ip} "sudo chown \$(id -u):\$(id -g) /home/ubuntu/admin.conf"
                    grep -e --token k8s-init.log > join.cmd
                    ssh -i ${SSH_KEY_PATH} ubuntu@${master_ip} "KUBECONFIG=/home/ubuntu/admin.conf kubectl apply -f https://git.io/weave-kube-1.6"
                    """
                }
            }
        }

        stage('Join Nodes to Kubernetes Master') {
            steps {
                script {
                    def node_addresses = sh(script: "terraform output -json | jq -r '.node_addresses.value|@sh' | sed -e \"s/'//g\"", returnStdout: true).trim()
                    def join_cmd = readFile('join.cmd').trim()
                    node_addresses.split(' ').each { node ->
                        sh """
                        ssh -i ${SSH_KEY_PATH} -o StrictHostKeyChecking=no ubuntu@${node} "sudo ${join_cmd}"
                        """
                    }
                }
            }
        }

        stage('Setup Weave Scope') {
            steps {
                script {
                    def master_ip = sh(script: "terraform output -json | jq -r '.master_address.value'", returnStdout: true).trim()
                    sh """
                    ssh -i ${SSH_KEY_PATH} ubuntu@${master_ip} "KUBECONFIG=/home/ubuntu/admin.conf kubectl apply -f 'https://cloud.weave.works/launch/k8s/weavescope.yaml'"
                    """
                }
            }
        }

        stage('Deploy Sock Shop') {
            steps {
                script {
                    def master_ip = sh(script: "terraform output -json | jq -r '.master_address.value'", returnStdout: true).trim()
                    sh """
                    ssh -i ${SSH_KEY_PATH} ubuntu@${master_ip} "KUBECONFIG=/home/ubuntu/admin.conf kubectl apply -f /tmp/manifests/sock-shop-ns.yaml -f /tmp/manifests"
                    """
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    def elb_url = sh(script: "terraform output -json | jq -r '.sock_shop_address.value'", returnStdout: true).trim()
                    sh """
                    docker run --rm weaveworksdemos/load-test -d 300 -h ${elb_url} -c 2 -r 100
                    """
                }
            }
        }

        stage('Clean Up') {
            steps {
                script {
                    def master_ip = sh(script: "terraform output -json | jq -r '.master_address.value'", returnStdout: true).trim()
                    sh """
                    ssh -i ${SSH_KEY_PATH} ubuntu@${master_ip} "kubectl delete deployments --all"
                    ssh -i ${SSH_KEY_PATH} ubuntu@${master_ip} "kubectl delete service \$(kubectl get services | cut -d\" \" -f1 | grep -v NAME | grep -v kubernetes)"
                    terraform destroy -auto-approve
                    aws ec2 delete-key-pair --key-name deploy-docs-k8s
                    rm -f ${SSH_KEY_PATH}
                    rm -f terraform.tfstate
                    rm -f terraform.tfstate.backup
                    rm -f k8s-init.log
                    rm -f join.cmd
                    """
                }
            }
        }
    }
}
